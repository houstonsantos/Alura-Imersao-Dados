# -*- coding: utf-8 -*-
"""DesafiosAulas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nqTh184XAcdDBo5Sd3gmgLQZ5ldNvRLS
"""

import math
import numpy as np
import pandas as pd 
import seaborn as sns
import matplotlib.pyplot as plt
#import matplotlib.gridspec as GridSpec
from matplotlib import gridspec

# Definindo stilo
sns.set_style('darkgrid')

# Importando dados do GitHub 
url = 'https://github.com/alura-cursos/imersao-dados-2-2020/blob/master/MICRODADOS_ENEM_2019_SAMPLE_43278.csv?raw=true'

dados = pd.read_csv(url, sep = ',')

"""## Verificando base de dados"""

dados.shape

# dados.columns()
dados.columns.values

dados.head().style.background_gradient(cmap = 'viridis')

# Verificando valores nulos
dados.isnull().sum().sort_values(ascending = True)

"""## Desafios Aula 01

Desafio01: Proporção dos inscritos por idade.

Desafio02: Descobrir de quais estados são os inscritos com 13 anos.

Desafio03: Adicionar título no gráfico

Desafio04: Plotar os Histogramas das idades dos do treineiro e não treineiros.

Desafio05: Comparar as distribuições das provas em inglês espanhol

Desafio06: Explorar a documentações e visualizações com matplotlib ou pandas e gerar novas visualizações.
"""

# Desafio01: Proporção dos inscritos por idade.
dados.NU_IDADE.value_counts(normalize = True) * 100

# Desafio02: Descobrir de quais estados são os inscritos com 13 anos.
dados.loc[dados.NU_IDADE == 13, 'SG_UF_RESIDENCIA'].unique()

# Desafio02: Descobrir de quais estados são os inscritos com 13 anos.
dados.loc[dados.NU_IDADE == 13, 'SG_UF_RESIDENCIA'].value_counts()

# Desafio03: Adicionar título no gráfico
plt.figure(figsize = (10, 8))
sns.distplot(dados.NU_IDADE, axlabel = 'Idade').set_title('Distribuição da Idade')
plt.ylabel("Frequencia")
plt.show()

# Desafio04: Plotar os Histogramas das idades dos do treineiro e não treineiros.
plt.figure(figsize = (10,8))
sns.distplot(dados.loc[dados.IN_TREINEIRO == 0, 'NU_IDADE'], hist = True)
sns.distplot(dados.loc[dados.IN_TREINEIRO == 1, 'NU_IDADE'], hist = True)
plt.title('Distribuição das Idades dos Treineiros e não Treineiros')
plt.legend(labels = ['Treineiro','Não Treineiro'], ncol = 2, loc = 'upper right')
plt.xlabel('Idade')
plt.ylabel('Frequencia')
plt.show()

# Desafio05: Comparar as distribuições das provas em inglês espanhol
plt.figure(figsize = (10,8))
sns.distplot(dados.loc[dados.TP_LINGUA == 0, 'NU_NOTA_LC'], hist = True)
sns.distplot(dados.loc[dados.TP_LINGUA == 1, 'NU_NOTA_LC'], hist = True)
plt.title('Comprando Distribuição das notas de Inglês e Espanhol')
plt.legend(labels = ['Inglês','Espanhol'], ncol = 2, loc = 'upper left')
plt.xlabel('Nota')
plt.ylabel('Frequencia')
plt.show()

# Desafio06: Explorar a documentações e visualizações com matplotlib ou pandas e gerar novas visualizações.
dados['TP_SEXO'] = dados['TP_SEXO'].map({'F':'Feminino', 'M':'Masculino'})
dados['TP_COR_RACA'] = dados['TP_COR_RACA'].map({0:'NA', 6:'NA', 1:'Branca', 2:'Preta', 3:'Parda', 4:'Amarela', 5:'Indígena'})

# Análisando cor da pele
plt.figure(figsize = (10, 8))
sns.countplot(dados.TP_COR_RACA).set_title("Cor da Pele")
plt.xlabel("")
plt.ylabel("Frequência")
plt.show()

# Análisando cor da pele x sexo
plt.figure(figsize = (10, 8))
sns.countplot(dados.TP_COR_RACA, hue = dados.TP_SEXO).set_title("Cor da Pele x Sexo")
plt.xlabel("")
plt.ylabel("Frequência")
plt.show()

# Análisando UF
plt.figure(figsize = (10, 8))
sns.countplot(dados.SG_UF_RESIDENCIA).set_title("Estados")
plt.xlabel("")
plt.ylabel("Frequência")
plt.show()

# Análisando nota da redação
plt.figure(figsize = (10, 8))
sns.boxplot(x = dados.TP_SEXO, y = dados.NU_NOTA_REDACAO, showfliers = False).set_title("Sexo x Nota de Redação")
plt.xlabel("")
plt.ylabel("Nota")
plt.show()

# Análisando nota de matemática
plt.figure(figsize = (10, 8))
sns.boxplot(x = dados.TP_SEXO, y = dados.NU_NOTA_MT, showfliers = False).set_title("Sexo x Nota de Matemática")
plt.xlabel("")
plt.ylabel("Nota")
plt.show()

# Verificando distribuição de notas matemática
plt.figure(figsize = (10, 8))
sns.distplot(dados.loc[dados.TP_SEXO == 'Masculino', 'NU_NOTA_MT'], hist = True)
sns.distplot(dados.loc[dados.TP_SEXO == 'Feminino', 'NU_NOTA_MT'], hist = True)
plt.title('Nota de Matemática')
plt.xlabel("Nota")
plt.ylabel("")
plt.legend(labels = ['Mas','Fem'], ncol = 2, loc = 'upper left')
plt.show()

# Verificando distribuição de notas redação
plt.figure(figsize = (10, 8))
sns.distplot(dados.loc[dados.TP_SEXO == 'Masculino', 'NU_NOTA_REDACAO'], hist = True)
sns.distplot(dados.loc[dados.TP_SEXO == 'Feminino', 'NU_NOTA_REDACAO'], hist = True)
plt.title('Nota de Redação')
plt.xlabel("Nota")
plt.ylabel("")
plt.legend(labels = ['Mas','Fem'], ncol = 2, loc = 'upper left')
plt.show()

"""## Deafios Aula 02

MEGA DESAFIO DA THAINÁ: Pegar a amostra completa dos alunos de 13 e 14 anos

Desafio do Gui bonzinho: aumentar a amostra para alunos menor de idade e compara a proporção por estado.

Desafio 3: Criar uma função para plotar o boxplot do seaborn

Desafio 4: Verificar se quem zerou a prova foi eliminado ou não estava presente

Desafio 5: Quem é eliminado tira zero ou será NaN (não teve registro de notas)

Desafio 6: Verificar a proporção dos participantes de rendas mais altas e mais baixas como treineiro e não treineiro.

Desafio 7: Fazer o mesmo boxplot olhando para a questão 25 (tem internet ou não) e fazer uma reflexão sobre o assunto e o contexto de pandemia.
"""

# MEGA DESAFIO DA THAINÁ: Pegar a amostra completa dos alunos de 13 e 14 anos
# dados.query('NU_IDADE == 13 | NU_IDADE == 14')
mega_desafio = dados[(dados["NU_IDADE"] == 13) | (dados["NU_IDADE"] == 14)]
mega_desafio

p_mega_desafio = mega_desafio.SG_UF_RESIDENCIA.value_counts(normalize = True) * 100
p_mega_desafio

p_mega_desafio = p_mega_desafio.reset_index()

plt.figure(figsize = (10, 8))
sns.barplot(x = 'index', y = 'SG_UF_RESIDENCIA', data = p_mega_desafio)
plt.xlabel("Estado")
plt.ylabel("Proporção (%)")
plt.title("Alunos de 13 e 14 anos", fontweight = "bold")

# Desafio do Gui bonzinho: aumentar a amostra para alunos menor de idade e compara a proporção por estado.
gui_desafio = dados[dados["NU_IDADE"] < 18]
gui_desafio

p_gui_desafio = gui_desafio['SG_UF_RESIDENCIA'].value_counts(normalize = True) * 100
p_gui_desafio

p_gui_desafio = p_gui_desafio.reset_index()

plt.figure(figsize = (10, 8))
sns.barplot(x = 'index', y = 'SG_UF_RESIDENCIA', data = p_gui_desafio)
plt.xlabel("Estado")
plt.ylabel("Proporção (%)")
plt.title("Alunos menores de 18 anos", fontweight = "bold")

# Desafio 3: Criar uma função para plotar o boxplot do seaborn
def sBoxplot(y, title, xl, yl):
    ordem = dados.Q006.unique()
    ordem.sort()

    plt.figure(figsize = (10, 8))
    sns.boxplot(x = 'Q006', y = y, data = dados, order = ordem, showfliers = False)
    plt.title(title)
    plt.xlabel(xl)
    plt.ylabel(yl)
    plt.show()

sBoxplot('NU_NOTA_MT', 'Nota MT por Renda', 'Classe', 'Renda')

# Desafio 4: Verificar se quem zerou a prova foi eliminado ou não estava presente
dados.query('NU_NOTA_CN == 0 ')['TP_PRESENCA_CN'].value_counts()

"""18 PRESENTES ZEROU A PROVA"""

dados.query('NU_NOTA_CH == 0')['TP_PRESENCA_CH'].value_counts()

"""176 PRESENTES ZEROU A PROVA"""

dados.query('NU_NOTA_MT == 0')['TP_PRESENCA_MT'].value_counts()

"""25 PRESENTES ZEROU A PROVA"""

dados.query('NU_NOTA_LC == 0')['TP_PRESENCA_LC'].value_counts()

"""96 PRESENTES ZEROU A RPOVA"""

# Desafio 5: Quem é eliminado tira zero ou será NaN (não teve registro de notas)
dados.query('TP_PRESENCA_CN == 2')['NU_NOTA_CN'].value_counts(dropna = False)

dados.query('TP_PRESENCA_CH == 2')['NU_NOTA_CH'].value_counts(dropna = False)

dados.query('TP_PRESENCA_MT == 2')['NU_NOTA_MT'].value_counts(dropna = False)

dados.query('TP_PRESENCA_LC == 2')['NU_NOTA_LC'].value_counts(dropna = False)

# Desafio 6: Verificar a proporção dos participantes de rendas mais altas e mais baixas como treineiro e não treineiro.
renda_ordenada = dados["Q006"].unique()
renda_ordenada.sort()
renda_ordenada

dados.query('IN_TREINEIRO == 0')['Q006'].value_counts(normalize = True).sort_index() * 100

dados.query('IN_TREINEIRO == 1')['Q006'].value_counts(normalize = True).sort_index() * 100

renda_normalizada = dados[['Q006', 'IN_TREINEIRO']].value_counts(normalize = True) * 100
renda_normalizada = renda_normalizada.reset_index()
renda_normalizada["IN_TREINEIRO"] = renda_normalizada["IN_TREINEIRO"].map({0: "Não", 1: "Sim"})

plt.figure(figsize = (10, 8))
sns.barplot(x = 'Q006', y = 0, hue = 'IN_TREINEIRO', data = renda_normalizada, order = renda_ordenada)
plt.title('Proporção entre rendas de treineiro e não treineiro', fontweight = 'bold')
plt.ylabel('Proporção (%)')
plt.xlabel('Tipo de Renda')
plt.legend(title = 'Treineiro', ncol = 1, loc = 'upper right')

# Desafio 7: Fazer o mesmo boxplot olhando para a questão 25 (tem internet ou não) e fazer uma reflexão sobre o assunto e o contexto de pandemia.
dados['Q025'] = dados['Q025'].map({'A': 'Não', 'B': "Sim"})
provas = ['NU_NOTA_CN', 'NU_NOTA_CH', 'NU_NOTA_MT', 'NU_NOTA_LC', 'NU_NOTA_REDACAO']
dados['NU_NOTA_TOTAL'] = dados[provas].sum(axis = 1)
provas.append('NU_NOTA_TOTAL')

dados_sem_zero = dados.query('NU_NOTA_TOTAL != 0')

plt.figure(figsize = (10, 8))
sns.boxplot(x = 'Q025', y = "NU_NOTA_TOTAL", data = dados_sem_zero, hue = 'Q025', showfliers = False)
plt.title('Nota total em relação a quem possui ou não internet', fontweight = 'bold')
plt.ylabel('Nota Total')
plt.xlabel('Possui Internet')

"""## Desfios Aula 03

Desafio: Plotar as médias, medianas e moda nas notas de LC e MT (matiplotlib linha vertical)

Desafio2: Melhorar a visualização da matriz de correlação e analisar mais detalhadamente.

Desafio3: Filtrar as notas por seu estado ou sua cidade e refazer as análises, verificando se são semelhantes ao geral.

Desafio4: Pensar sobre a correlação entre matemática e Linguagens.
"""

# Desafio: Plotar as médias, medianas e moda nas notas de LC e MT (matiplotlib linha vertical)
def gen_plot(ax, val, df, fig):
  axis_plot = sns.histplot(ax = ax, data = df, x = val, element = 'poly')
    
  mean = df[val].mean()
  median = df[val].median()
  mode = df[val].mode()[0]

  ax.axvline(mean, color = 'b', linewidth = 1.5, linestyle = '--', label = 'Média: {:.1f}'.format(mean))
  ax.axvline(median, color = 'r', linewidth = 1.5, linestyle = '--', label = 'Mediana: {:.1f}'.format(median))
  ax.axvline(mode, color = 'y', linewidth = 1.5, linestyle = '--', label = 'Moda: {:.1f}'.format(mode))

  ax.set_title('Histograma - {}'.format(val))

  x, y = axis_plot.get_ylim()

  ax.annotate('média ' + str(np.around(mean, 1)),
            xy = (mean, y / 1.5),
            xycoords = 'data',
            xytext = (-150, -100),
            textcoords = 'offset points',
            arrowprops = dict(headwidth = 10, width = 4, color = 'b', connectionstyle = 'angle3,angleA=0,angleB=-90'),
            fontsize = 12)
  
  ax.annotate('mediana ' + str(np.around(median, 1)),
            xy = (median,  (y / 1.5)),
            xycoords = 'data',
            xytext = (-100, -150),
            textcoords = 'offset points',
            arrowprops = dict(headwidth = 10, width = 4, color = 'r', connectionstyle = 'angle3,angleA=0,angleB=-90'),
            fontsize = 12)
  
  ax.annotate('moda ' + str(np.around(mode, 1)),
            xy = (mode, y / 1.5),
            xycoords = 'data',
            xytext = (-100, -200),
            textcoords = 'offset points',
            arrowprops = dict(headwidth = 10, width = 4, color = 'y', connectionstyle = 'angle3,angleA=0,angleB=-90'),
            fontsize = 12)
  
  ax.legend(loc = 0)

def gen_describe_on_hist(x_provas, df):
  sns.set()
  N = len(x_provas)
  cols = 2
  rows = int(math.ceil(N / cols))

  gs = gridspec.GridSpec(rows, cols)
  dims = (25,8)

  if(rows > 1):
    dims = (24, 20)
  fig = plt.figure(figsize = dims)
  for n in range(N):
    ax = fig.add_subplot(gs[n])
    gen_plot(ax, x_provas[n], df, fig)

gen_describe_on_hist(provas, dados_sem_zero)

# Desafio2: Melhorar a visualização da matriz de correlação e analisar mais detalhadamente.
corr = dados_sem_zero[['NU_NOTA_CN', 'NU_NOTA_CH', 'NU_NOTA_MT', 'NU_NOTA_LC', 'NU_NOTA_REDACAO', 'NU_NOTA_TOTAL']].corr()
corr

mask = np.zeros_like(corr)
mask[np.triu_indices_from(mask)] = True

plt.subplots(figsize = (10, 8))
sns.heatmap(corr, annot = True, cmap = 'YlGnBu',  annot_kws = {"size": 12}, square = True, mask = mask)
plt.title('Correlação das Notas ENEM', fontweight = 'bold')
plt.xlabel('Notas das Provas')
plt.ylabel('Notas das Provas')

# Desafio3: Filtrar as notas por seu estado ou sua cidade e refazer as análises, verificando se são semelhantes ao geral.
dados_pe = dados_sem_zero.query("SG_UF_RESIDENCIA == 'PE'")
dados_sem_pe = dados_sem_zero.query("SG_UF_RESIDENCIA != 'PE'")

plt.figure(figsize = (10, 8))
sns.histplot(dados_pe, x = 'NU_NOTA_TOTAL', kde = True, stat = 'density', color = 'red')
sns.histplot(dados_sem_pe, x = 'NU_NOTA_TOTAL', kde = True, stat = 'density')
plt.title('Comparação Notas Pernambuco e Brasil ENEM 2019', fontweight = 'bold')
plt.legend(labels = ('Linha Pernanbuco', 'Linha Brasil', 'Área Pernambuco', 'Área Brasil'))
plt.xlabel('Nota Total do Participante')
plt.ylabel('Densidade / Proporção de Notas')

# Desafio4: Pensar sobre a correlação entre matemática e Linguagens.
plt.figure(figsize = (10, 8))
sns.kdeplot(data = dados_sem_zero, x = 'NU_NOTA_MT', y = 'NU_NOTA_LC', hue = 'TP_SEXO', fill = True)
plt.title('Correlação entre as Notas de Matemática & Linguagem e Código ENEM 2019', fontweight = 'bold')
#plt.legend(title = 'Sexo', labels = ('', 'Masculino', 'Feminino'))
plt.xlabel('Nota de Matemática')
plt.ylabel('Nota de Linguagem e Código')

plt.figure(figsize = (10, 8))
sns.scatterplot(data = dados_sem_zero, x ='NU_NOTA_MT', y = 'NU_NOTA_LC', hue = 'TP_SEXO')
plt.title('Correlação entre as Notas de Matemática & Linguagem e Código ENEM 2019', fontweight = 'bold')
plt.legend(title = 'Sexo', labels = ('Não definido', 'Masculino', 'Feminino'))
plt.xlabel('Nota de Matemática')
plt.ylabel('Nota de Linguagem e Código')
plt.xlim((350, 1050))
plt.ylim((300, 1050))

plt.figure(figsize = (10, 8))
sns.scatterplot(data = dados_sem_zero, x = 'NU_NOTA_MT', y = 'NU_NOTA_LC', hue = 'TP_COR_RACA', palette = 'Dark2')
plt.title('Correlação entre as Notas de Mátematica & Linguagem e Código ENEM 2019')
plt.legend(title = 'Cor/Raça', labels = ('', 'Não Declarado', 'Branca', 'Preta', 'Parda', 'Amarela', 'Indígena'))
plt.xlabel('Nota de Matemática')
plt.ylabel('Nota de Linguagem e Código')
plt.xlim((350,1050))
plt.ylim((300,1050))

plt.figure(figsize = (10, 8))
sns.scatterplot(data = dados_sem_zero, x = 'NU_NOTA_MT', y = 'NU_NOTA_LC', hue = 'TP_ESCOLA', palette = 'Dark2')
plt.title('Correlação entre as Notas de Matemática & Linguagem e Código ENEM 2019')
plt.legend(title = 'Tipo de escola do Ensino Médio', labels = ('', 'Não Respondeu', 'Publica', 'Privada'))
plt.xlabel('Nota de Matemática')
plt.ylabel('Nota de Linguagem e Código')
plt.xlim((350,1050))
plt.ylim((300,1050))

"""## Desafio Aula 04"""

.